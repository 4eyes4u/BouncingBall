# viz = visdom.Visdom()
    # ball.plot_simulation(viz, indices, 25 * len(indices))


# def plot_simulation(self, viz, indices, step):
    #     '''
    #     'Indices' is a list.
    #     '''
    #     # self._calculate()
    #     # parameters for visdom plot
    #     xtickmin = 0
    #     xtickmax = max([self.r[idx][:, 0][-1] for idx in indices]) + 0.25
    #     ytickmin = 0
    #     ytickmax = max([np.max(self.r[idx][:, 1]) for idx in indices]) + 0.25
    #     win = None
    #     opts = dict(
    #         xtickmin=xtickmin,
    #         xtickmax=xtickmax,
    #         ytickmin=ytickmin,
    #         ytickmax=ytickmax,
    #         xlabel='x [m]',
    #         ylabel='y [m]',
    #         legend=[str(np.round(np.rad2deg(self.angles[idx]), 0))
    #                 for idx in indices],
    #         width=1000,
    #         height=600,
    #     )

    #     self.logger.info('Simulation has started')
    #     cnt, i, prev = 0, 0, 0
    #     # for i in range(self.n_steps // step):
    #     while cnt < self.n_steps:
    #         cnt += step
    #         for idx in indices:
    #             deg = np.round(np.rad2deg(self.angles[idx]), 0)
    #             if win is None:
    #                 win = viz.line(X=self.r[idx][:, 0][prev: cnt],
    #                                Y=self.r[idx][:, 1][prev: cnt],
    #                                name=str(deg),
    #                                opts=opts)
    #             else:
    #                 viz.line(X=self.r[idx][:, 0][prev: cnt],
    #                          Y=self.r[idx][:, 1][prev: cnt],
    #                          win=win,
    #                          update='append',
    #                          name=str(deg))
    #         prev = cnt
    #         if cnt > self.n_steps // (len(indices) + 1):
    #             step = min(int(1.05 * step), 75 * len(indices))
    #         i = i + 1
    #     self.logger.info('Simulation has finished')